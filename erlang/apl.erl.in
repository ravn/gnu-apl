%% -*- coding: utf-8 -*-

-module(apl).
-export([init/0, command/1, statement/1]).

% functions defined in erlang_APL_nif.c and dummy implementations for them...
%
-export([command_utf8/1,     command_ucs/1,
         statement_utf8/1,   statement_ucs/1,
         fix_function_ucs/1, set_variable/3,
         eval_B/2]).                    % implemented in erlang_APL_nif.c
command_utf8(_)     -> exit(nif_library_not_loaded).
command_ucs(_)      -> exit(nif_library_not_loaded).
statement_utf8(_)   -> exit(nif_library_not_loaded).
statement_ucs(_)    -> exit(nif_library_not_loaded).
fix_function_ucs(_) -> exit(nif_library_not_loaded).
set_variable(_,_,_) -> exit(nif_library_not_loaded).
eval_B(_,_)         -> exit(nif_library_not_loaded).

% convert Erlang term X to a APL value cell
%
e2c(false)               -> 0;       % false == 0
e2c(true)                -> 1;       % true  == 1
e2c(X) when is_number(X) -> X;       % numeric scalar
e2c(X) when is_list(X) ->            % nested value
   {value, [length(X)], X};
e2c(X) -> X.

% convert Erlang term X to a APL value triple
%
%
e2a(false)               -> {value, [], [0]};            % false == 0
e2a(true)                -> {value, [], [1]};            % true  == 1
e2a(X) when is_number(X) -> {value, [], [X]};            % numeric scalar
e2a(X) when is_list(X) ->                                % vector
   Fun = fun(T, Acc) -> [e2c(T)|Acc] end,
   {value, [length(X)], lists:reverse(lists:foldl(Fun, [], X))};
e2a(X) -> {error, e2a, 'Invalid eterm', X}.


init() -> erlang:load_nif("@prefix@/lib/@PACKAGE@/erlang_APL_nif", 0).

command(C)   -> command_ucs(C).
statement(S) -> statement_ucs(S).

