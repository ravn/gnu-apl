#!/bin/bash

# this script builds different GNU APL variants and tests some of them

# figure and normalize some directory names
#
START_dir=`pwd`
cd `dirname $0` 
BUILD_dir=`pwd`
# LOG_dir="/tmp"       # where to store longer build logs
LOG_dir="$BUILD_dir"   # where to store longer build logs
ROOT_dir=`dirname $BUILD_dir`
SRC_dir="$ROOT_dir/src"

declare -i build_errors=0
declare -i missing_files=0
declare -i configs_bad=0
declare -i configs_good=0

# remove old build results and start a fresh summary file
#
rm -f "$BUILD_dir"/apl-*
rm -f "$LOG_dir"/*.log
echo "Build Summary:" > "$LOG_dir/summary.log"

###################################################################
# build one configuration
#
build_one()
{
   # $1: configuration name
   # $2: ./configure options
   # $3: expected result (file)
   #

   rm -f "$3"   # remove stale build results (should not exist)

   local time_FROM=`date +%s`
   cd $ROOT_dir
   echo "configuring for configuration: \"$1\"..."
   {
     set -o xtrace

     ./configure $2
     set +o xtrace
   } > "$LOG_dir/configure-$1.log" 2>&1
   echo "building configuration \"$1\"..."
   cd $ROOT_dir
   {
     echo "building \"$1\"..."
     make clean
     echo "
======== make clean done ======================================================
"
     make -j6 all
   } > "$LOG_dir/build-$1.log"
   local make_result=$?
   local time_TO=`date +%s`
   local secs=$(( $time_TO - $time_FROM ))
   local summ="$LOG_dir/summary.log"
   if [ $make_result -eq 0 ] ; then   # make succeeded
      echo "    make OK for configuration: $1" >> $summ
      if [ -f "$SRC_dir/apl" ] ; then
         mv -f "$SRC_dir/apl" "$BUILD_dir/apl--$1"
         configs_good=$((configs_good+1))
      elif [ -f "$SRC_dir/.libs/libapl.so" ] ; then
         mv -f "$SRC_dir/.libs/libapl.so" "$BUILD_dir/"
         configs_good=$((configs_good+1))
      elif [ -f "$SRC_dir/.libs/lib_gnu_apl.so" ] ; then
         mv -f "$SRC_dir/.libs/lib_gnu_apl.so" "$BUILD_dir/"
         configs_good=$((configs_good+1))
      elif [ ! -f $3 ] ; then
         echo "**** no file $3 after building $1" >> $summ
         missing_files=$((missing_files+1))
         configs_bad=$((configs_bad+1))
      fi
      echo "    build $1: OK ($secs seconds)" >> $summ
   else                        # make failed
       echo "make FAILED with exit code: $make_result" >> $summ
       echo "*** build $1: FAILED ($secs seconds)" >> $summ
       build_errors=$((build_errors+1))
       configs_bad=$((configs_bad+1))
   fi
   echo "    configuration: \"$1\" done." >> $summ
}

###################################################################
# test one configuration
#
test_one()
{
   echo "testing configuration \"$1\"..."
   local time_FROM=`date +%s`
   local summ="$LOG_dir/summary.log"
   cd $SRC_dir
   make test > /dev/null 2>&1
   local make_result=$?
   local time_TO=`date +%s`
   local secs=$(( $time_TO - $time_FROM ))
   if [ $make_result -eq 0 ] ; then
      echo "    test $1: OK ($secs seconds)"     >> $summ
   else
      echo "*** test $1: FAILED ($secs seconds)" >> $summ
   fi
}

cd $ROOT_dir
autoreconf
if [ "$?" != 0 ]; then
    echo "*** cannot build all since autoreconf failed ***"
    exit 42
fi
echo "autoreconf done."

# shortcuts for various configure options
STD="--enable-maintainer-mode"
LIBAPL="--with-libapl"
PYTHON="--with-python"
ERLANG="--with-erlang"
DEV="DEVELOP_WANTED=yes"
RAT="RATIONAL_NUMBERS_WANTED=yes"

PERF="PERFORMANCE_COUNTERS_WANTED=yes"
DYLO="DYNAMIC_LOG_WANTED=yes"
XCB="--without-gtk3"
CC_3="CORE_COUNT_WANTED=-3"		# âŽ•SYL controls the number of cores
noVC="VALUE_CHECK_WANTED=no"
noVH="VALUE_HISTORY_WANTED=no"
AL0="ASSERT_LEVEL_WANTED=0"             # no ASSERTions
FAST="$noVC $noVH $AL0"

# the standard configuration
#
build_one "standard" "$STD" "$SRC_dir/apl"
test_one  "standard"

build_one "libxcb" "$STD $XCB" "$SRC_dir/apl"
test_one  "standard"

# the developer configuration with rational number support
#
build_one "rational" "$STD $DEV $RAT" "$SRC_dir/apl"


# apl as library
#
build_one "libapl" "$STD $LIBAPL" "$SRC_dir/.libs/libapl.so"

# python interface
#
build_one "python" "$STD $PYTHON" "$SRC_dir/.libs/lib_gnu_apl.so"


# parallel benchmarking
#
build_one "parallel_bench" "$STD $FAST $PERF $DYLO $CC_3" "$SRC_dir/apl"

# erlang interface
#
build_one "erlang" "$STD $ERLANG" "$SRC_dir/.libs/erlang_APL_nif.so"


# the developer configuration. Make this the last one so that it survives
#
build_one "develop" "$STD $DEV" "$SRC_dir/apl"
test_one "develop"

{
  echo
  echo "$build_errors build errors"
  echo "$missing_files missing files"
  echo "$configs_bad configurations failed"
  echo "$configs_good configurations succeeded"
} >> "$LOG_dir/summary.log"

cat "$LOG_dir/summary.log"


cd $START_dir	# undo all cds in this script

