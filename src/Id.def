/*
    This file is part of GNU APL, a free implementation of the
    ISO/IEC Standard 13751, "Programming Language APL, Extended"

    Copyright (C) 2008-2014  Dr. Jürgen Sauermann

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should hste received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

   // to maintain )SAVE / )LOAD compatibility, append new items at the end
   // of their character!


// make Solaris happy
//
#ifdef ES
#undef ES
#endif

//      Id              UCS        = Value    Macro
//-------------------------------------------------
pp( No_ID         , ---       , = 0      )
pp( No_ID1        , ---       , = 1      )
pp( No_ID2        , ---       , = 2      )
pp( No_ID3        , ---       , = 3      )

qf( AF            , "⎕AF"     , = 0x4101 )
qv( AI            , "⎕AI"     ,          )
qv( ARG           , "⎕ARG"    ,          )
st( F2_AND        , "∧"       ,          )
pp( APL_VALUE1    , ---       ,          )
pp( APL_VALUE2    , ---       ,          )
pp( APL_VALUE3    , ---       ,          )
st( ASSIGN        , "←"       ,          )
qf( AT            , "⎕AT"     ,          )
qv( AV            , "⎕AV"     ,          )
st( ALPHA         , "⍺"       ,          )
st( ALPHA_U       , "⍶"       ,          )

st( F12_BINOM     , "!"       , = 0x4201 )
st( BRANCH        , "→"       ,          )

pp( CHARACTER     , ---       , = 0x4301 )
st( F12_CIRCLE    , "○"       ,          )
st( COLON         , ":"       ,          )
st( F12_COMMA     , ","       ,          )
st( F12_COMMA1    , "⍪"       ,          )
st( OPER1_COMMUTE , "⍨"       ,          )
pp( COMPLEX       , ---       ,          )
qf( CR            , "⎕CR"     ,          )
qv( CT            , "⎕CT"     ,          )
st( CHI           , "χ"       ,          )

st( F12_DECODE    , "⊥"       , = 0x4401 )
st( DIAMOND       , "◊"       ,          )
st( F12_DIVIDE    , "÷"       ,          )
qf( DL            , "⎕DL"     ,          )
st( F12_DOMINO    , "⌹"       ,          )
st( F12_DROP      , "↓"       ,          )

qf( EA            , "⎕EA"     , = 0x4501 )
st( OPER1_EACH    , "¨"       ,          )
qf( EC            , "⎕EC"     ,          )
st( F12_ELEMENT   , "∈"       ,          )
qv( EM            , "⎕EM"     ,          )
st( F12_ENCODE    , "⊤"       ,          )
pp( END           , ---       ,          )
pp( ENDL          , ---       ,          )  // last END in line
qf( ENV           , "⎕ENV"    ,          )
st( F2_EQUAL      , "="       ,          )
st( F12_EQUIV     , "≡"       ,          )
pp( ERROR         , ---       ,          )
qf( ES            , "⎕ES"     ,          )
st( ESCAPE        , "→"       ,          )
qv( ET            , "⎕ET"     ,          )
qf( EX            , "⎕EX"     ,          )
st( F1_EXECUTE    , "⍎"       ,          )

qv( FC            , "⎕FC"     , = 0x4601 )
st( F2_FIND       , "⋸"       ,          )
pp( FIRST_TIME    , ---       ,          )
st( F12_FORMAT    , "⍕"       ,          )
qf( FX            , "⎕FX"     ,          )

st( F2_GREATER    , ">"       , = 0x4701 )

st( F2_INDEX      , "⌷"       , = 0x4901 )
st( F12_INDEX_OF  , "⍳"       ,          )
pp( INTEGER       , ---       ,          )
pp( INVALID       , ---       ,          )
qv( IO            , "⎕IO"     ,          )
qf( INP           , "⎕INP"    ,          )
st( F2_INTER      , "∩"       ,          )
st( OPER2_INNER   , "."       ,          )

st( JOT           , "∘"       , = 0x4A01 )

qv( L             , "⎕L"      , = 0x4C01 )
st( L_BRACK       , "["       ,          )
st( L_CURLY       , "{"       ,          )
st( L_PARENT      , "("       ,          )
qv( LC            , "⎕LC"     ,          )
st( F2_LEFT       , "⊣"       ,          )
st( F2_LEQ        , "≤"       ,          )
st( F2_LESS       , "<"       ,          )
st( F12_LOGA      , "⍟"       ,          )
pp( LVAL          , ---       ,          )
qv( LX            , "⎕LX"     ,          )
st( LAMBDA        , "λ"       ,          )

st( F2_MEQ        , "≥"       , = 0x4D01 )
st( F12_MINUS     , "-"       ,          )

qf( NA            , "⎕NA"     , = 0x4E01 )
st( F2_NAND       , "⍲"       ,          )
qf( NC            , "⎕NC"     ,          )
qf( NL            , "⎕NL"     ,          )
  /**  ⎕NLT removed                       **/
pp( NO_VALUE      , ---       , = 0x4E06 )
st( F2_NOR        , "⍱"       ,          )
st( F12_NEQUIV    , "≢"       ,          )
pp( OFF           , ---       , = 0x4F01 )
st( F2_OR         , "∨"       ,          )
st( OMEGA         , "⍵"       ,          )
st( OMEGA_U       , "⍹"       ,          )
st( OPER2_OUTER   , "∘."      ,          )

st( F12_PARTITION , "⊂"       , = 0x5001 )
st( F12_PICK      , "⊃"       ,          )
st( F12_PLUS      , "+"       ,          )
st( F12_POWER     , "⋆"       ,          )
qv( PP            , "⎕PP"     ,          )
qv( PR            , "⎕PR"     ,          )
qv( PS            , "⎕PS"     ,          )
qv( PT            , "⎕PT"     ,          )
  /**  OPER2_PRODUCT removed              **/
qv( PW            , "⎕PW"     , = 0x5009 )
st( OPER2_POWER   , "⍣"       ,          )

st( Quad_Quad     , "⎕"       , = 0x5101 )
st( QUOTE1        , "'"       ,          )
st( QUOTE2        , "\""      ,          )
st( QUOTE_Quad    , "⍞"       ,          )

qv( R             , "⎕R"      , = 0x5201 )
st( R_ARROW       , "→"       ,          )
st( R_BRACK       , "]"       ,          )
st( R_CURLY       , "}"       ,          )
st( R_PARENT      , ")"       ,          )
st( OPER2_RANK    , "⍤"       ,          )
pp( REAL          , ---       ,          )
st( OPER1_REDUCE  , "/"       ,          )
st( OPER1_REDUCE1 , "⌿"       ,          )
pp( RETURN_EXEC   , ---       ,          )   // ⍎X
pp( RETURN_STATS  , ---       ,          )   // A ◊ B ◊ C
pp( RETURN_SYMBOL , ---       ,          )   // Z←A FUN B
pp( RETURN_VOID   , ---       ,          )   // A FUN B
st( F12_RHO       , "⍴"       ,          )
st( F2_RIGHT      , "⊢"       ,          )
qv( RL            , "⎕RL"     ,          )
st( F12_RND_DN    , "⌊"       ,          )
st( F12_RND_UP    , "⌈"       ,          )
st( F12_ROLL      , "?"       ,          )
st( F12_ROTATE    , "⌽"       ,          )
st( F12_ROTATE1   , "⊖"       ,          )

st( OPER1_SCAN    , "\\"      , = 0x5301 )
st( OPER1_SCAN1   , "⍀"       ,          )
st( SEMICOL       , ";"       ,          )
qf( SI            , "⎕SI"     ,          )
pp( SI_PUSHED     , ---       ,          )
pp( SI_EVAL_ERR   , ---       ,          )
st( F12_SORT_ASC  , "⍋"       ,          )
st( F12_SORT_DES  , "⍒"       ,          )
st( SPACE         , " "       ,          )
st( F12_STILE     , "∣"       ,          )
qf( SVC           , "⎕SVC"    ,          )
qv( SVE           , "⎕SVE"    ,          )
qf( SVO           , "⎕SVO"    ,          )
qf( SVQ           , "⎕SVQ"    ,          )
qf( SVR           , "⎕SVR"    ,          )
qf( SVS           , "⎕SVS"    ,          )
qv( SYL           , "⎕SYL"    ,          )
pp( USER_SYMBOL   , ---       ,          )
pp( STOP_LINE     , ---       ,          )
qf( STOP          , "⎕STOP"   ,          )

st( F12_TAKE      , "↑"       , = 0x5401 )
qv( TC            , "⎕TC"     ,          )
qf( TF            , "⎕TF"     ,          )
st( F12_TIMES     , "×"       ,          )
st( F12_TRANSPOSE , "⍉"       ,          )
qv( TS            , "⎕TS"     ,          )
qv( TZ            , "⎕TZ"     ,          )
qf( TRACE         , "⎕TRACE"  ,          )

qf( UCS           , "⎕UCS"    , = 0x5501 )
qv( UL            , "⎕UL"     ,          )
st( F2_UNEQ       , "≠"       ,          )
st( F12_UNION     , "∪"       ,          )
pp( FUN_USER      , ---       ,          )

pp( VARIABLE      , ---       , = 0x5601 )
pp( VOID          , ---       ,          )

qv( WA            , "⎕WA"     , = 0x5701 )
st( F12_WITHOUT   , "∼"       ,          )
qv( X             , "⎕X"      , = 0x5801 )

st( F0_ZILDE      , "⍬"       , = 0x5A01 )

//-----------------------------------------------------------------------------

#undef pp
#undef qf
#undef qv
#undef st

