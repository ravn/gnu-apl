Application Program Interface for GNU APL
=========================================

The following main facilities are provided:

`apl_exec`
~   pass a C string to the interpreter for immediate execution as APL code.
`apl_command`
~   pass an APL command to the command processor and return its output.
`APL_value`
~   a pointer to an opaque structure Value, supported by over 30 functions
    allowing one to construct a new Value and to gain access to its rank, 
    shape and ravel. 
`get_var_value`
~   construct an APL value initialized by the contents of a variable in 
    the current workspace.
`set_var_value`
~   set the contents of a variable in the workspace to that of the
    given APL value.

No other GNU APL header is exposed.

Vague details of the GNU APL implementation
===========================================

Although the implementation is hidden from the API, the programmer
needs to know a little about it.

Only one workspace, simply known as "the workspace", is active at any
time. The workspace may be cleared, named, saved and restored by calls
to `apl_command`.

The workspace contains a collection of symbols of various kinds. Apart 
from `apl_exec` and `apl_command`, which behave as if entered from the 
keyboard in an interactive APL session, this API gives access only to 
APL variables, i.e. symbols associated with values.

A value is a multidimensional array of cells. It has three visible
components: rank, shape and ravel.

The shape is a vector of integers, giving the number of elements along 
each axis of the array. Thus the number of elements in the array is
given by the product of the shape items. The number of shape items is
known as the rank. An empty product is of course equal to 1, so that 
a scalar has rank 0.

The ravel is a vector of cells, accessed in APL by a multi-index but in
the interface by a single index starting at 0. As one progresses along 
the ravel, the multi-index is ordered lexicographically, e.g. in a clear 
workspace, the multi-index of an array of shape `2 3` would take the 
values `1 1`, `1 2`, `1 3`, `2 1`, `2 2`, `2 3`. The index origin in APL 
may be changed by `apl_exec`, but in the interface the ravel is always 
indexed from 0.

A cell can hold any of several kinds of objects:

1. A scalar value, i.e. either a number or a single 16-bit Unicode character.
   The number may be stored internally as a 64-bit integer, a `double`, or
   a `complex<double>`.
2. A smart pointer to a value. This allows nested arrays to be represented.
3. None of the above, i.e. information not accessible from the API.

Summary of functions
====================

These are more fully described in the comments preceding each function.

Constructor functions
---------------------

Each of these functions returns an APL value and has a name descriptive
of its argument list.

`get_var_value`, `int_scalar`, `double_scalar`, `complex_scalar` and 
`char_scalar` initialize to a given value.

`apl_scalar`, `apl_vector`, `apl_matrix` and `apl_cube` initialize
to arrays of rank 0,1,2,3; `apl_value` initializes to an array of 
arbitrary shape. All cells in these arrays are initialized to 0.

They are to be used like pointers created by `new`. Any value 
constructed by one of these must be explicitly destroyed by 
`release_value` to prevent memory leaks.

Read access to APL values
-------------------------

`get_rank`, `get_axis`, `get_element_count` and `get_type` give
information about the shape and ravel elements.

`is_char`, `is_int`, `is_double`, `is_complex` and `is_value`
are conveniently named front-ends to `get_type`.

`get_char`, `get_int`, `get_real`, `get_imag` and `get_value`
retrieve the actual contents of a cell of which the type is
already known.

Note that get_value is also a constructor function so that it needs
to be destroyed by release_value` to prevent memory leaks.


Write access to cells
---------------------

`set_char`, `set_int`, `set_real`, `set_imag` and `set_value`
replace the contents of a cell.

It is not possible to change the shape of an APL value.

Other routines
--------------

`set_var_value`, `print_value`, `UTF8_to_Unicode`, `Unicode_to_UTF8`.

