/*
    This file is part of GNU APL, a free implementation of the
    ISO/IEC Standard 13751, "Programming Language APL, Extended"

    Copyright (C) 2015  Dr. JÃ¼rgen Sauermann

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef __VALUE_ICC_DEFINED__
#define __VALUE_ICC_DEFINED__

#include "Value.hh"

UCS_string & MORE_ERROR();

//-----------------------------------------------------------------------------
void
Value_P_Base::increment_owner_count(Value * v, const char * loc)
{
  Assert1(v);
  if (v->check_ptr == reinterpret_cast<const char *>(v) + 7)   ++v->owner_count;
}
//-----------------------------------------------------------------------------
inline void
Value_P_Base::decrement_owner_count(Value * & v, const char * loc)
{
   Assert1(v);

   if (v->check_ptr == reinterpret_cast<const char *>(v) + 7)
      {
        Assert1(v->owner_count > 0);
         --v->owner_count;

        if (v->owner_count == 0)
           {
             delete v;
             v = 0;
           }
      }
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const char * loc)
{
   try
      {
        value_p = new Value(loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const Cell & cell, const char * loc)
{
   try
      {
        value_p = new Value(cell, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(cell, loc (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const Cell &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(cell, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(ShapeItem len, const char * loc)
{
   try
      {
        value_p = new Value(len, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(len, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const ShapeItem &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(len, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const UCS_string & ucs, const char * loc)
{
   try
      {
        value_p = new Value(ucs, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(ucs, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const UCS_string &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(ucs, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const CDR_string & cdr, const char * loc)
{
   try
      {
        value_p = new Value(cdr, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(cdr, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const CDR_string &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(cdr, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const PrintBuffer & pb, const char * loc)
{
   try
      {
        value_p = new Value(pb, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(pb, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const PrintBuffer &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(pb, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const UTF8_string & utf, const char * loc)
{
   try
      {
        value_p = new Value(utf, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(utf, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(const UTF8_string &, loc) failed at "  LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(utf, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const char * loc, const Shape * shape)
{
   try
      {
        value_p = new Value(loc, shape);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(loc, shape) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(Shape " << shape << " failed at " LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(loc, shape) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const Shape & shape, const char * loc)
{
   try
      {
        value_p = new Value(shape, loc);
      }
   catch (Error error)
      {
        // new() succeeded, but allocation of a (long) ravel failed.
        //
        Log(LOG_Value_alloc)   CERR << "Ravel allocation failed" << endl;
        MORE_ERROR() << "new Value(shape, loc) failed (ravel allocation)";
        throw error;   // rethrow
      }
   catch (...)
      {
        // new() failed
        //
        Log(LOG_Value_alloc)
           CERR << "Value_P::Value_P(Shape " << shape << " failed at " LOC
                << " (caller: " << loc << ")" << endl;
        MORE_ERROR() << "new Value(shape, loc) failed";
        WS_FULL;
      }

   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(Value * val, const char * loc)
{
   value_p = val;
   increment_owner_count(value_p, loc);
   ADD_EVENT(value_p, VHE_PtrNew, value_p->owner_count, loc);
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const Value_P & other, const char * loc)
{
   value_p = other.value_p;
   if (value_p)
      {
        increment_owner_count(value_p, loc);
        ADD_EVENT(value_p, VHE_PtrCopy1, value_p->owner_count, loc);
      }
}
//-----------------------------------------------------------------------------
inline Value_P::Value_P(const Value_P & other)
{
   value_p = other.value_p;
   if (value_p)
      {
        increment_owner_count(value_p, LOC);
        ADD_EVENT(value_p, VHE_PtrCopy1, value_p->owner_count, LOC);
      }
}
//-----------------------------------------------------------------------------
inline void
Value_P::operator =(const Value_P & other)
{
   if (value_p == other.value_p)   return;   // same pointer

   if (value_p)   // override existing pointer
      {
        decrement_owner_count(value_p, LOC);
        ADD_EVENT(value_p, VHE_PtrClr, other.value_p->owner_count, LOC);
      }

   value_p = other.value_p;
   if (value_p)
      {
        increment_owner_count(value_p, LOC);
        ADD_EVENT(value_p, VHE_PtrCopy3, value_p->owner_count, LOC);
      }
}
//-----------------------------------------------------------------------------
inline Value_P::~Value_P()
{    
   if (value_p)
      {
        decrement_owner_count(value_p, LOC);
        ADD_EVENT(value_p, VHE_PtrDel,
                  value_p ? value_p->owner_count : -99, LOC);
      }
}    
//-----------------------------------------------------------------------------
inline void
Value_P_Base::reset()
{
   if (value_p)
      {
        decrement_owner_count(value_p, LOC);
        value_p = 0;
      }
}
//-----------------------------------------------------------------------------
inline void
Value_P_Base::clear(const char * loc)
{
  if (value_p)
     {
       decrement_owner_count(value_p, loc);
       ADD_EVENT(value_p, VHE_PtrClr,
                 value_p ? value_p->owner_count : -99, loc);

       value_p = 0;
     }
}
//-----------------------------------------------------------------------------
inline void
Value_P_Base::clear_pointer(const char * loc)
{
  if (value_p)
     {
       // do NOT decrement_owner_count() !
       ADD_EVENT(value_p, VHE_PtrClr,
                 value_p ? value_p->owner_count : -99, loc);

       value_p = 0;
     }
}
//-----------------------------------------------------------------------------

#endif // __VALUE_ICC_DEFINED__

