\input texinfo
@setfilename apl.info
@documentencoding UTF-8

@node Top
@top Top

@menu
* Application Program Interface for GNU APL::
* Vague details of the GNU APL implementation::
* Summary of functions::
* Programming notes::
* Appendix List of system variables and system functions::
@end menu

@node Application Program Interface for GNU APL
@chapter Application Program Interface for GNU APL
@anchor{#application-program-interface-for-gnu-apl}
The following main facilities are provided:

@table @asis
@item @code{apl_exec}

pass a C string to the interpreter for immediate execution as APL code.
@item @code{apl_command}

pass an APL command to the command processor and return its output.
@item @code{APL_value}

a pointer to an opaque structure Value, supported by over 30 functions allowing one to construct a new Value and to gain access to its rank, shape and ravel. In this document, the terms "Value" and "APL value" are not interchangeable; they refer respectively to a structure and to a pointer.
@item @code{get_var_value}

return an APL value pointing to the contents of a variable in the current workspace.
@item @code{set_var_value}

set the contents of a variable in the workspace to that of the given APL value.
@end table

No other GNU APL header is exposed.

@node Vague details of the GNU APL implementation
@chapter Vague details of the GNU APL implementation
@anchor{#vague-details-of-the-gnu-apl-implementation}
Although the implementation is hidden from the API, the programmer needs to know a little about it.

Only one workspace, simply known as "the workspace", is active at any time. The workspace may be cleared, named, saved and restored by calls to @code{apl_command}.

The workspace contains a collection of symbols of various kinds. Apart from @code{apl_exec} and @code{apl_command}, which behave as if entered from the keyboard in an interactive APL session, this API gives access only to APL variables, i.e. symbols associated with Values.

A Value is a multidimensional array of cells. It has three visible components: rank, shape and ravel.

The shape is a vector of integers, giving the number of elements along each axis of the array. The number of shape items is known as the rank. There is an upper bound to the rank, configurable when GNU APL is built, which is displayed as a message by @code{apl_exec("⎕SYL[7;]")}.

The ravel is a vector of cells, accessed in APL by a multi-index but in the API by a single index starting at 0. As one progresses along the ravel, the multi-index is ordered lexicographically, e.g. in a clear workspace, the multi-index of an array of shape @code{2 3} would successively be @code{1 1}, @code{1 2}, @code{1 3}, @code{2 1}, @code{2 2}, @code{2 3}. The index origin in APL may be changed by @code{apl_exec("⎕IO←0")}, but in the API the ravel is always indexed from 0.

The number of elements in the ravel is given by the product of the shape items. An empty product is of course equal to 1, thus this calculation is also valid for a scalar, which has rank 0.

A cell can hold any of several kinds of objects:

@enumerate 
@item
A scalar, i.e. either a number or a single 32-bit Unicode character. The number may be stored internally as a 64-bit integer, a @code{double}, or a @code{complex<double>}.
@item
An APL value. This allows nested arrays to be represented.
@item
None of the above, i.e. information not accessible from the API.
@end enumerate

The API does not give direct access to cell objects. The user must know what is in a particular cell and retrieve it by supplying its position in the ravel, using a specialized access method for cells of that particular type. To this end, the cell type can be queried. This is an integer treated as a bit string. The bits denoting cells accessible from the API have predefined names.

@verbatim
CCT_CHAR    = 0x02
CCT_POINTER = 0x04
CCT_INT     = 0x10
CCT_FLOAT   = 0x20
CCT_COMPLEX = 0x40
CCT_NUMERIC = CCT_INT | CCT_FLOAT | CCT_COMPLEX
@end verbatim

Attempting to retrieve the contents of a cell by the wrong access method is an error that will crash the program.
@menu
* Lifespan of Values::
@end menu

@node Lifespan of Values
@section Lifespan of Values
@anchor{#lifespan-of-values}
@enumerate 
@item
All Values are invisible to the API. Internally, they contain a reference count, and are scheduled for destruction when the reference count reaches zero. The actual destruction might not happen immediately. The fact that one succeeded in accessing a Value does not prove that it is still alive, it merely means that it has not yet been destructed.

@item
All API functions that return an APL value increment the reference count. It is your responsibility to decrement the reference count using @code{release_value} when the Value is no longer needed. Failure to do so will cause memory leaks.

@item
The APL value provided in the argument list of @code{res_callback} (see @ref{#interface-to-apl-interpreter,Interface to APL interpreter}) has a particularly brief lifespan. The execution of that function is your only chance of accessing it. Its reference count is not increased before the call, so you must not release it.

@item
The type-dependent @code{set_} functions change one element only. Other references to that Value will also reflect the change; for example, if the APL value was returned by @code{get_var_value}, a following call to @code{get_var_value} with the same variable name will show the change.

@item
@code{set_value} makes a new deep copy of a non-scalar Value. Cloning (which is deliberately discouraged in the API by not providing a copy constructor) can be simulated with the aid of @code{set_value}. The details are left to the persevering user.

@item
@code{set_var_value} makes a new deep copy of the Value.

@end enumerate

@node Summary of functions
@chapter Summary of functions
@anchor{#summary-of-functions}
This section is an aide-memoire, not a manual: consult the comments preceding each function for details.
@menu
* Constructor functions::
* Read access to Values::
* Write access to cells::
* Interface to APL interpreter::
* Print support::
@end menu

@node Constructor functions
@section Constructor functions
@anchor{#constructor-functions}
Each of these functions returns an APL value and has a name descriptive of its argument list.

@code{int_scalar}, @code{double_scalar}, @code{complex_scalar} and @code{char_scalar} initialize to a given C value.

@code{char_vector} initializes from a UTF-8 encoded C string to an array of rank 1 containing Unicode characters.

@code{apl_scalar}, @code{apl_vector}, @code{apl_matrix} and @code{apl_cube} initialize to arrays of rank 0,1,2,3; @code{apl_value} initializes to an array of arbitrary shape. All cells in these arrays are initialized to 0.

@node Read access to Values
@section Read access to Values
@anchor{#read-access-to-values}
@code{get_rank}, @code{get_axis}, @code{get_element_count} and @code{get_type} give information about the shape and ravel elements.

@code{is_char}, @code{is_int}, @code{is_double}, @code{is_complex} and @code{is_value} are conveniently named front-ends to @code{get_type}.

@code{is_string} tests whether the entire value is a simple character vector. If so, @code{print_value_to_string} can be used to convert it to a UTF-8 encoded C string.

@code{get_char}, @code{get_int}, @code{get_real}, @code{get_imag} and @code{get_value} retrieve the actual contents of a cell of which the type is already known.

@node Write access to cells
@section Write access to cells
@anchor{#write-access-to-cells}
Cells can be accessed only via an APL value pointing to their containing Value.

@code{set_char}, @code{set_int}, @code{set_real}, @code{set_imag} and @code{set_value} replace the contents of a cell.

It is not possible to change the shape of an APL value.

@node Interface to APL interpreter
@section Interface to APL interpreter
@anchor{#interface-to-apl-interpreter}
An external function pointer @code{res_callback} is called just before @code{apl_exec} exits. To exploit it, assign a suitable user-written function to it, e.g.

@verbatim
/* callback to print every value */
static int always_print(const APL_value apl,int committed) {
  return 1;
}

/* callback to save it in the workspace under the name "λ" */
static int save_to_hidden(const APL_value apl,int committed) {
  set_var_value("λ",apl,LOC);
  return ~committed;
}

/* One-off declaration statement, must not be inside a function */
result_callback res_callback = always_print_it;
...
/* A later assignment statement may be anywhere */
res_callback = save_it_to_hidden;  
...
res_callback = NULL;      /* disables callback feature */
@end verbatim

Here @code{apl} is the anonymous value to which the APL expression evaluates. You are granted access to it just before its brief lifespan expires. @code{committed} is a C boolean (only 0 is false) reporting whether that value was stored to a variable. Your return value is a C boolean telling whether the value should be printed by the APL interpreter.

The value @code{*apl} (which the API cannot see) will be scheduled for destruction as soon as you exit @code{res_callback}, so don't release it yourself.

@node Print support
@section Print support
@anchor{#print-support}
@code{print_value}, @code{print_value_to_string} filter an APL value through the APL formatting routines. Their behaviour depends on several system variables, such as @code{⎕FC}, @code{⎕PP}, @code{⎕PW}.

@code{UTF8_to_Unicode}, @code{Unicode_to_UTF8} are provided because @code{get_char} and @code{set_char} work with 32-bit Unicode, whereas many other user interfaces use UTF-8.

@node Programming notes
@chapter Programming notes
@anchor{#programming-notes}
The typical application would start with:

@verbatim
#include <stdio.h>
#include <stdint.h>
#include <libapl.h>
@end verbatim

This interface can be called from C, but since GNU APL is a C++ package. the C++ library must be explicitly loaded, e.g. in Linux:

@verbatim
cc myprog.c -lapl -lstdc++ -o myprog
@end verbatim

@menu
* The loc parameter and LOC macro::
@end menu

@node The loc parameter and LOC macro
@section The @code{loc} parameter and @code{LOC} macro
@anchor{#the-loc-parameter-and-loc-macro}
Many of the API functions contain a parameter @code{const char* loc}. This parameter is used to keep track of changes to a Value and may be displayed by certain debugging services. You can put in anything you like, but most convenient is @code{LOC}, a macro that expands to the file name and line number.

@node Appendix List of system variables and system functions
@chapter Appendix: List of system variables and system functions
@anchor{#appendix-list-of-system-variables-and-system-functions}

@verbatim
⎕AI     Account Information
⎕ARG    command line arguments of the interpreter
⎕AV     Atomic Vector
⎕CT     Comparison Tolerance
⎕EM     Event Message
⎕ET     Event Type
⎕FC     Format Control
⎕IO     Index Origin
⎕L      Left Argument
⎕LC     Line Counter
⎕LX     Latent Expression
⎕PP     Printing Precision
⎕PR     Prompt Replacement
⎕PS     Print Style 
⎕PT     Print Tolerance about 10^-⎕PP
⎕PW     Print Width
⎕       Evaluated Input/Output
⍞       Evaluated Input/Output
⎕R      Right Argment
⎕SYL    System Limits
⎕TC     Terminal Control Characters
⎕TS     Time Stamp
⎕TZ     Time Zone
⎕UL     User Load
⎕WA     Workspace Available
⎕X      Axis Argument

⎕AF     Atomic Function
⎕AT     Attributes
⎕CR     Character Representation
⎕DL     Delay
⎕EA     Execute Alternate
⎕EC     Execute Controlled
⎕ENV    ENvironment Variables
⎕ES     Event Simulate
⎕EX     Expunge
⎕FX     Fix
⎕INP    Input from script
⎕NA     Name Association
⎕NC     Name Class
⎕NL     Name List
⎕RL     Random Link
⎕SI     State Indicator
⎕SVx    Shared Variable; x = C,E,O,Q,R,S for
              Control, Event, Offer, Query, Retraction, State
⎕TF     Transfer Form
⎕UCS    Universal Character Set
@end verbatim
