This is libapl.info, produced by makeinfo version 5.2 from libapl.texi.


File: libapl.info,  Node: Top,  Next: Application Program Interface for GNU APL,  Up: (dir)

Top
***

* Menu:

* Application Program Interface for GNU APL::
* Vague details of the GNU APL implementation::
* Summary of functions::
* Programming notes::
* Appendix List of system variables and system functions::


File: libapl.info,  Node: Application Program Interface for GNU APL,  Next: Vague details of the GNU APL implementation,  Prev: Top,  Up: Top

1 Application Program Interface for GNU APL
*******************************************

The following main facilities are provided:

‘apl_exec’

     pass a C string to the interpreter for immediate execution as APL
     code.
‘apl_command’

     pass an APL command to the command processor and return its output.
‘APL_value’

     a pointer to an opaque structure Value, supported by over 30
     functions allowing one to construct a new Value and to gain access
     to its rank, shape and ravel.  In this document, the terms "Value"
     and "APL value" are not interchangeable; they refer respectively to
     a structure and to a pointer.
‘get_var_value’

     return an APL value pointing to the contents of a variable in the
     current workspace.
‘set_var_value’

     set the contents of a variable in the workspace to that of the
     given APL value.

   No other GNU APL header is exposed.


File: libapl.info,  Node: Vague details of the GNU APL implementation,  Next: Summary of functions,  Prev: Application Program Interface for GNU APL,  Up: Top

2 Vague details of the GNU APL implementation
*********************************************

Although the implementation is hidden from the API, the programmer needs
to know a little about it.

   Only one workspace, simply known as "the workspace", is active at any
time.  The workspace may be cleared, named, saved and restored by calls
to ‘apl_command’.

   The workspace contains a collection of symbols of various kinds.
Apart from ‘apl_exec’ and ‘apl_command’, which behave as if entered from
the keyboard in an interactive APL session, this API gives access only
to APL variables, i.e.  symbols associated with Values.

   A Value is a multidimensional array of cells.  It has three visible
components: rank, shape and ravel.

   The shape is a vector of integers, giving the number of elements
along each axis of the array.  The number of shape items is known as the
rank.  There is an upper bound to the rank, configurable when GNU APL is
built, which is displayed as a message by ‘apl_exec("⎕SYL[7;]")’.

   The ravel is a vector of cells, accessed in APL by a multi-index but
in the API by a single index starting at 0.  As one progresses along the
ravel, the multi-index is ordered lexicographically, e.g.  in a clear
workspace, the multi-index of an array of shape ‘2 3’ would successively
be ‘1 1’, ‘1 2’, ‘1 3’, ‘2 1’, ‘2 2’, ‘2 3’.  The index origin in APL
may be changed by ‘apl_exec("⎕IO←0")’, but in the API the ravel is
always indexed from 0.

   The number of elements in the ravel is given by the product of the
shape items.  An empty product is of course equal to 1, thus this
calculation is also valid for a scalar, which has rank 0.

   A cell can hold any of several kinds of objects:

  1. A scalar, i.e.  either a number or a single 32-bit Unicode
     character.  The number may be stored internally as a 64-bit
     integer, a ‘double’, or a ‘complex<double>’.
  2. An APL value.  This allows nested arrays to be represented.
  3. None of the above, i.e.  information not accessible from the API.

   The API does not give direct access to cell objects.  The user must
know what is in a particular cell and retrieve it by supplying its
position in the ravel, using a specialized access method for cells of
that particular type.  To this end, the cell type can be queried.  This
is an integer treated as a bit string.  The bits denoting cells
accessible from the API have predefined names.

CCT_CHAR    = 0x02
CCT_POINTER = 0x04
CCT_INT     = 0x10
CCT_FLOAT   = 0x20
CCT_COMPLEX = 0x40
CCT_NUMERIC = CCT_INT | CCT_FLOAT | CCT_COMPLEX

   Attempting to retrieve the contents of a cell by the wrong access
method is an error that will crash the program.
* Menu:

* Lifespan of Values::


File: libapl.info,  Node: Lifespan of Values,  Up: Vague details of the GNU APL implementation

2.1 Lifespan of Values
======================

  1. All Values are invisible to the API. Internally, they contain a
     reference count, and are scheduled for destruction when the
     reference count reaches zero.  The actual destruction might not
     happen immediately.  The fact that one succeeded in accessing a
     Value does not prove that it is still alive, it merely means that
     it has not yet been destructed.

  2. All API functions that return an APL value increment the reference
     count.  It is your responsibility to decrement the reference count
     using ‘release_value’ when the Value is no longer needed.  Failure
     to do so will cause memory leaks.

  3. The APL value provided in the argument list of ‘res_callback’ (see
     *note Interface to APL interpreter: #interface-to-apl-interpreter.)
     has a particularly brief lifespan.  The execution of that function
     is your only chance of accessing it.  Its reference count is not
     increased before the call, so you must not release it.

  4. The type-dependent ‘set_’ functions change one element only.  Other
     references to that Value will also reflect the change; for example,
     if the APL value was returned by ‘get_var_value’, a following call
     to ‘get_var_value’ with the same variable name will show the
     change.

  5. ‘set_value’ makes a new deep copy of a non-scalar Value.  Cloning
     (which is deliberately discouraged in the API by not providing a
     copy constructor) can be simulated with the aid of ‘set_value’.
     The details are left to the persevering user.

  6. ‘set_var_value’ makes a new deep copy of the Value.


File: libapl.info,  Node: Summary of functions,  Next: Programming notes,  Prev: Vague details of the GNU APL implementation,  Up: Top

3 Summary of functions
**********************

This section is an aide-memoire, not a manual: consult the comments
preceding each function for details.
* Menu:

* Constructor functions::
* Read access to Values::
* Write access to cells::
* Interface to APL interpreter::
* Print support::


File: libapl.info,  Node: Constructor functions,  Next: Read access to Values,  Up: Summary of functions

3.1 Constructor functions
=========================

Each of these functions returns an APL value and has a name descriptive
of its argument list.

   ‘int_scalar’, ‘double_scalar’, ‘complex_scalar’ and ‘char_scalar’
initialize to a given C value.

   ‘char_vector’ initializes from a UTF-8 encoded C string to an array
of rank 1 containing Unicode characters.

   ‘apl_scalar’, ‘apl_vector’, ‘apl_matrix’ and ‘apl_cube’ initialize to
arrays of rank 0,1,2,3; ‘apl_value’ initializes to an array of arbitrary
shape.  All cells in these arrays are initialized to 0.


File: libapl.info,  Node: Read access to Values,  Next: Write access to cells,  Prev: Constructor functions,  Up: Summary of functions

3.2 Read access to Values
=========================

‘get_rank’, ‘get_axis’, ‘get_element_count’ and ‘get_type’ give
information about the shape and ravel elements.

   ‘is_char’, ‘is_int’, ‘is_double’, ‘is_complex’ and ‘is_value’ are
conveniently named front-ends to ‘get_type’.

   ‘is_string’ tests whether the entire value is a simple character
vector.  If so, ‘print_value_to_string’ can be used to convert it to a
UTF-8 encoded C string.

   ‘get_char’, ‘get_int’, ‘get_real’, ‘get_imag’ and ‘get_value’
retrieve the actual contents of a cell of which the type is already
known.


File: libapl.info,  Node: Write access to cells,  Next: Interface to APL interpreter,  Prev: Read access to Values,  Up: Summary of functions

3.3 Write access to cells
=========================

Cells can be accessed only via an APL value pointing to their containing
Value.

   ‘set_char’, ‘set_int’, ‘set_real’, ‘set_imag’ and ‘set_value’ replace
the contents of a cell.

   It is not possible to change the shape of an APL value.


File: libapl.info,  Node: Interface to APL interpreter,  Next: Print support,  Prev: Write access to cells,  Up: Summary of functions

3.4 Interface to APL interpreter
================================

An external function pointer ‘res_callback’ is called just before
‘apl_exec’ exits.  To exploit it, assign a suitable user-written
function to it, e.g.

/* callback to print every value */
static int always_print(const APL_value apl,int committed) {
  return 1;
}

/* callback to save it in the workspace under the name "λ" */
static int save_to_hidden(const APL_value apl,int committed) {
  set_var_value("λ",apl,LOC);
  return ~committed;
}

/* One-off declaration statement, must not be inside a function */
result_callback res_callback = always_print_it;
...
/* A later assignment statement may be anywhere */
res_callback = save_it_to_hidden;
...
res_callback = NULL;      /* disables callback feature */

   Here ‘apl’ is the anonymous value to which the APL expression
evaluates.  You are granted access to it just before its brief lifespan
expires.  ‘committed’ is a C boolean (only 0 is false) reporting whether
that value was stored to a variable.  Your return value is a C boolean
telling whether the value should be printed by the APL interpreter.

   The value ‘*apl’ (which the API cannot see) will be scheduled for
destruction as soon as you exit ‘res_callback’, so don’t release it
yourself.


File: libapl.info,  Node: Print support,  Prev: Interface to APL interpreter,  Up: Summary of functions

3.5 Print support
=================

‘print_value’, ‘print_value_to_string’ filter an APL value through the
APL formatting routines.  Their behaviour depends on several system
variables, such as ‘⎕FC’, ‘⎕PP’, ‘⎕PW’.

   ‘UTF8_to_Unicode’, ‘Unicode_to_UTF8’ are provided because ‘get_char’
and ‘set_char’ work with 32-bit Unicode, whereas many other user
interfaces use UTF-8.


File: libapl.info,  Node: Programming notes,  Next: Appendix List of system variables and system functions,  Prev: Summary of functions,  Up: Top

4 Programming notes
*******************

The typical application would start with:

#include <stdio.h>
#include <stdint.h>
#include <libapl.h>

   This interface can be called from C, but since GNU APL is a C++
package.  the C++ library must be explicitly loaded, e.g.  in Linux:

cc myprog.c -lapl -lstdc++ -o myprog

* Menu:

* The loc parameter and LOC macro::


File: libapl.info,  Node: The loc parameter and LOC macro,  Up: Programming notes

4.1 The ‘loc’ parameter and ‘LOC’ macro
=======================================

Many of the API functions contain a parameter ‘const char* loc’.  This
parameter is used to keep track of changes to a Value and may be
displayed by certain debugging services.  You can put in anything you
like, but most convenient is ‘LOC’, a macro that expands to the file
name and line number.


File: libapl.info,  Node: Appendix List of system variables and system functions,  Prev: Programming notes,  Up: Top

5 Appendix: List of system variables and system functions
*********************************************************

⎕AI     Account Information
⎕ARG    command line arguments of the interpreter
⎕AV     Atomic Vector
⎕CT     Comparison Tolerance
⎕EM     Event Message
⎕ET     Event Type
⎕FC     Format Control
⎕IO     Index Origin
⎕L      Left Argument
⎕LC     Line Counter
⎕LX     Latent Expression
⎕PP     Printing Precision
⎕PR     Prompt Replacement
⎕PS     Print Style
⎕PT     Print Tolerance about 10^-⎕PP
⎕PW     Print Width
⎕       Evaluated Input/Output
⍞       Evaluated Input/Output
⎕R      Right Argment
⎕SYL    System Limits
⎕TC     Terminal Control Characters
⎕TS     Time Stamp
⎕TZ     Time Zone
⎕UL     User Load
⎕WA     Workspace Available
⎕X      Axis Argument

⎕AF     Atomic Function
⎕AT     Attributes
⎕CR     Character Representation
⎕DL     Delay
⎕EA     Execute Alternate
⎕EC     Execute Controlled
⎕ENV    ENvironment Variables
⎕ES     Event Simulate
⎕EX     Expunge
⎕FX     Fix
⎕INP    Input from script
⎕NA     Name Association
⎕NC     Name Class
⎕NL     Name List
⎕RL     Random Link
⎕SI     State Indicator
⎕SVx    Shared Variable; x = C,E,O,Q,R,S for
              Control, Event, Offer, Query, Retraction, State
⎕TF     Transfer Form
⎕UCS    Universal Character Set


Tag Table:
Node: Top73
Node: Application Program Interface for GNU APL387
Ref: #application-program-interface-for-gnu-apl621
Node: Vague details of the GNU APL implementation1459
Ref: #vague-details-of-the-gnu-apl-implementation1714
Node: Lifespan of Values4397
Ref: #lifespan-of-values4542
Node: Summary of functions6177
Ref: #summary-of-functions6362
Node: Constructor functions6606
Ref: #constructor-functions6767
Node: Read access to Values7319
Ref: #read-access-to-values7510
Node: Write access to cells8111
Ref: #write-access-to-cells8309
Node: Interface to APL interpreter8568
Ref: #interface-to-apl-interpreter8772
Node: Print support10009
Ref: #print-support10153
Node: Programming notes10535
Ref: #programming-notes10725
Node: The loc parameter and LOC macro11049
Ref: #the-loc-parameter-and-loc-macro11223
Node: Appendix List of system variables and system functions11529
Ref: #appendix-list-of-system-variables-and-system-functions11766

End Tag Table


Local Variables:
coding: utf-8
End:
